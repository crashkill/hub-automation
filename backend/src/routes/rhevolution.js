const express = require('express');
const { asyncHandler } = require('../middleware/errorHandler.js');
const { validate, schemas } = require('../middleware/validation.js');
const RhevolutionService = require('../services/RhevolutionService.js');
const { config } = require('../config/environment.js');

const router = express.Router();
const rhevolutionService = new RhevolutionService();

/**
 * POST /api/rhevolution/login
 * Realiza login no sistema Rhevolution
 */
router.post('/login', validate(schemas.login), asyncHandler(async (req, res) => {
  const { username, password, authMethod = 'standard', tenantId } = req.body;
  
  console.log(`üîê Tentativa de login para usu√°rio: ${username} (m√©todo: ${authMethod})`);
  
  const options = { authMethod, tenantId };
  const result = await rhevolutionService.login(username, password, options);
  
  res.json({
    success: true,
    message: 'Login realizado com sucesso',
    data: {
      authenticated: true,
      sessionId: result.sessionId?.substring(0, 20) + '...', // Mascarar por seguran√ßa
      loginTime: new Date().toISOString()
    }
  });
}));

/**
 * POST /api/rhevolution/login/sso
 * Login espec√≠fico com SSO Microsoft
 */
router.post('/login/sso', validate(schemas.login), asyncHandler(async (req, res) => {
  const { username, password, tenantId } = req.body;
  
  console.log(`üîê Tentativa de login SSO Microsoft para usu√°rio: ${username}`);
  
  const options = { authMethod: 'sso', tenantId };
  const result = await rhevolutionService.login(username, password, options);
  
  res.json({
    success: true,
    message: 'Login SSO realizado com sucesso',
    data: {
      authenticated: true,
      sessionId: result.sessionId?.substring(0, 20) + '...', // Mascarar por seguran√ßa
      loginTime: new Date().toISOString(),
      authMethod: 'sso'
    }
  });
}));

/**
 * POST /api/rhevolution/logout
 * Realiza logout do sistema
 */
router.post('/logout', asyncHandler(async (req, res) => {
  console.log('üö™ Solicita√ß√£o de logout recebida');
  
  const result = await rhevolutionService.logout();
  
  res.json({
    success: true,
    message: result.message,
    data: {
      authenticated: false,
      logoutTime: new Date().toISOString()
    }
  });
}));

/**
 * GET /api/rhevolution/employees
 * Obt√©m lista de funcion√°rios com filtros opcionais
 */
router.get('/employees', validate(schemas.employeeSearch), asyncHandler(async (req, res) => {
  const filters = {
    department: req.query.department,
    status: req.query.status || 'active',
    limit: parseInt(req.query.limit) || 100,
    offset: parseInt(req.query.offset) || 0
  };
  
  console.log('üë• Solicita√ß√£o de lista de funcion√°rios:', filters);
  
  const result = await rhevolutionService.getEmployees(filters);
  
  res.json({
    success: true,
    message: `${result.employees.length} funcion√°rios encontrados`,
    data: result,
    pagination: {
      total: result.total,
      offset: result.offset,
      limit: result.limit,
      hasMore: result.hasMore
    }
  });
}));

/**
 * POST /api/rhevolution/reports/generate
 * Gera relat√≥rio espec√≠fico
 */
router.post('/reports/generate', validate(schemas.reportGeneration), asyncHandler(async (req, res) => {
  const reportConfig = req.body;
  
  console.log(`üìä Solicita√ß√£o de gera√ß√£o de relat√≥rio: ${reportConfig.type}`);
  
  const result = await rhevolutionService.generateReport(reportConfig);
  
  res.json({
    success: true,
    message: 'Relat√≥rio gerado com sucesso',
    data: {
      title: result.title,
      type: reportConfig.type,
      generatedAt: result.generatedAt,
      status: result.status,
      downloadUrl: result.downloadUrl,
      preview: result.data?.substring(0, 500) + (result.data?.length > 500 ? '...' : ''),
      config: reportConfig
    }
  });
}));

/**
 * GET /api/rhevolution/hour-bank
 * Obt√©m dados de banco de horas dos funcion√°rios
 */
router.get('/hour-bank', asyncHandler(async (req, res) => {
  const { employeeId } = req.query;
  
  console.log(`‚è∞ Solicita√ß√£o de banco de horas${employeeId ? ` para funcion√°rio: ${employeeId}` : ''}`);
  
  const result = await rhevolutionService.getHourBankBalance(employeeId);
  
  res.json({
    success: true,
    message: `${result.count} registros de banco de horas encontrados`,
    data: result
  });
}));

/**
 * GET /api/rhevolution/payroll
 * Obt√©m dados da folha de pagamento
 */
router.get('/payroll', asyncHandler(async (req, res) => {
  const { month, year } = req.query;
  
  console.log(`üí∞ Solicita√ß√£o de folha de pagamento${month && year ? ` para ${month}/${year}` : ''}`);
  
  const result = await rhevolutionService.getPayrollData(month, year);
  
  res.json({
    success: true,
    message: `${result.count} registros de folha de pagamento encontrados`,
    data: result
  });
}));

/**
 * GET /api/rhevolution/benefits
 * Obt√©m dados de benef√≠cios dos funcion√°rios
 */
router.get('/benefits', asyncHandler(async (req, res) => {
  const { employeeId } = req.query;
  
  console.log(`üéÅ Solicita√ß√£o de benef√≠cios${employeeId ? ` para funcion√°rio: ${employeeId}` : ''}`);
  
  const result = await rhevolutionService.getBenefitsData(employeeId);
  
  res.json({
    success: true,
    message: `${result.count} registros de benef√≠cios encontrados`,
    data: result
  });
}));

/**
 * GET /api/rhevolution/attendance
 * Obt√©m dados de frequ√™ncia/presen√ßa
 */
router.get('/attendance', asyncHandler(async (req, res) => {
  const { startDate, endDate, employeeId } = req.query;
  
  console.log(`üìÖ Solicita√ß√£o de frequ√™ncia${employeeId ? ` para funcion√°rio: ${employeeId}` : ''}`);
  
  const result = await rhevolutionService.getAttendanceData(startDate, endDate, employeeId);
  
  res.json({
    success: true,
    message: `${result.count} registros de frequ√™ncia encontrados`,
    data: result
  });
}));

/**
 * GET /api/rhevolution/status
 * Verifica status da conex√£o e autentica√ß√£o
 */
router.get('/status', asyncHandler(async (req, res) => {
  const status = rhevolutionService.getStatus();
  
  res.json({
    success: true,
    message: 'Status obtido com sucesso',
    data: {
      service: 'Rhevolution Scraper',
      version: '1.0.0',
      isConnected: status.isConnected,
      isAuthenticated: status.isAuthenticated,
      uptime: status.uptime,
      cache: {
        keys: status.cacheStats.keys,
        hits: status.cacheStats.hits,
        misses: status.cacheStats.misses
      },
      environment: process.env.NODE_ENV,
      timestamp: new Date().toISOString()
    }
  });
}));

/**
 * POST /api/rhevolution/sync
 * Sincroniza dados completos (funcion√°rios + relat√≥rios b√°sicos)
 */
router.post('/sync', asyncHandler(async (req, res) => {
  console.log('üîÑ Iniciando sincroniza√ß√£o completa...');
  
  const syncResults = {
    employees: null,
    payrollReport: null,
    attendanceReport: null,
    errors: []
  };
  
  try {
    // Sincronizar funcion√°rios
    console.log('üë• Sincronizando funcion√°rios...');
    syncResults.employees = await rhevolutionService.getEmployees({ status: 'active', limit: 1000 });
    
    // Gerar relat√≥rio de folha de pagamento do m√™s atual
    const currentDate = new Date();
    const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
    const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
    
    try {
      console.log('üí∞ Gerando relat√≥rio de folha...');
      syncResults.payrollReport = await rhevolutionService.generateReport({
        type: 'payroll',
        startDate: startOfMonth.toISOString().split('T')[0],
        endDate: endOfMonth.toISOString().split('T')[0],
        format: 'pdf'
      });
    } catch (error) {
      syncResults.errors.push(`Erro no relat√≥rio de folha: ${error.message}`);
    }
    
    // Gerar relat√≥rio de frequ√™ncia
    try {
      console.log('‚è∞ Gerando relat√≥rio de frequ√™ncia...');
      syncResults.attendanceReport = await rhevolutionService.generateReport({
        type: 'attendance',
        startDate: startOfMonth.toISOString().split('T')[0],
        endDate: endOfMonth.toISOString().split('T')[0],
        format: 'excel'
      });
    } catch (error) {
      syncResults.errors.push(`Erro no relat√≥rio de frequ√™ncia: ${error.message}`);
    }
    
    console.log('‚úÖ Sincroniza√ß√£o completa finalizada');
    
    res.json({
      success: true,
      message: 'Sincroniza√ß√£o realizada com sucesso',
      data: {
        syncTime: new Date().toISOString(),
        employeesCount: syncResults.employees?.total || 0,
        reportsGenerated: [
          syncResults.payrollReport ? 'payroll' : null,
          syncResults.attendanceReport ? 'attendance' : null
        ].filter(Boolean),
        errors: syncResults.errors,
        hasErrors: syncResults.errors.length > 0
      },
      details: syncResults
    });
    
  } catch (error) {
    console.error('‚ùå Erro na sincroniza√ß√£o:', error.message);
    
    res.status(500).json({
      success: false,
      message: 'Erro durante a sincroniza√ß√£o',
      error: error.message,
      data: syncResults
    });
  }
}));

/**
 * DELETE /api/rhevolution/session
 * Encerra sess√£o e fecha browser
 */
router.delete('/session', asyncHandler(async (req, res) => {
  console.log('üîí Encerrando sess√£o e browser...');
  
  await rhevolutionService.close();
  
  res.json({
    success: true,
    message: 'Sess√£o encerrada com sucesso',
    data: {
      sessionClosed: true,
      timestamp: new Date().toISOString()
    }
  });
}));

/**
 * GET /api/rhevolution/test
 * Endpoint para testar conex√£o
 */
router.get('/test', asyncHandler(async (req, res) => {
  try {
    const result = await rhevolutionService.testConnection();
    res.json({ success: true, data: result });
  } catch (error) {
    console.error('‚ùå Erro no teste de conex√£o:', error);
    res.status(500).json({ 
      success: false, 
      error: error.message 
    });
  }
}));

/**
 * POST /api/rhevolution/test-login
 * Endpoint para teste detalhado de login
 */
router.post('/test-login', asyncHandler(async (req, res) => {
  try {
    console.log('üß™ TESTE DETALHADO DE LOGIN INICIADO');
    console.log('üìã Dados recebidos:', JSON.stringify(req.body, null, 2));
    
    const { username, password, authMethod = 'standard' } = req.body;
    
    if (!username || !password) {
      return res.status(400).json({
        success: false,
        error: 'Username e password s√£o obrigat√≥rios',
        received: { username: !!username, password: !!password }
      });
    }
    
    console.log('üöÄ Iniciando processo de login...');
    const startTime = Date.now();
    
    const result = await rhevolutionService.login(username, password, authMethod);
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    console.log('‚úÖ LOGIN CONCLU√çDO COM SUCESSO!');
    console.log('‚è±Ô∏è Tempo total:', duration + 'ms');
    console.log('üìä Resultado:', JSON.stringify(result, null, 2));
    
    res.json({ 
      success: true, 
      data: result,
      metadata: {
        duration: duration + 'ms',
        timestamp: new Date().toISOString(),
        authMethod
      }
    });
  } catch (error) {
    const endTime = Date.now();
    console.error('‚ùå ERRO NO TESTE DE LOGIN:', {
      message: error.message,
      stack: error.stack,
      timestamp: new Date().toISOString()
    });
    
    res.status(500).json({ 
      success: false, 
      error: error.message,
      details: {
        type: error.constructor.name,
        timestamp: new Date().toISOString()
      }
    });
  }
}));

/**
 * GET /api/rhevolution/demo
 * Endpoint para demonstra√ß√£o do sistema funcionando
 */
router.get('/demo', asyncHandler(async (req, res) => {
  try {
    console.log('üéØ Executando demonstra√ß√£o do sistema...');
    
    const rhevolutionService = new RhevolutionService();
    
    // Teste b√°sico de inicializa√ß√£o
    await rhevolutionService.init();
    
    // Navegar para p√°gina inicial
    const testResult = await rhevolutionService.navigateToLogin();
    
    // Fechar conex√£o
    await rhevolutionService.close();
    
    res.json({
      status: 'success',
      message: 'Sistema Hub Automation operacional',
      timestamp: new Date().toISOString(),
      features: {
        backend: 'Node.js + Express ‚úÖ',
        automation: 'Puppeteer ‚úÖ', 
        security: 'Doppler + JWT ‚úÖ'
      },
      test: {
        url: testResult.url,
        ssoDetected: testResult.ssoDetected,
        fieldsFound: testResult.fieldsFound,
        result: 'Erro esperado - credenciais n√£o fornecidas'
      },
      nextSteps: [
        'Configurar credenciais via Doppler',
        'Testar autentica√ß√£o completa',
        'Implementar endpoints de produ√ß√£o'
      ]
    });
  } catch (error) {
    console.error('‚ùå Erro na demonstra√ß√£o:', error.message);
    res.status(500).json({
      status: 'error',
      message: 'Erro na demonstra√ß√£o do sistema',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
}));

/**
 * POST /api/rhevolution/test-microsoft-auth
 * Endpoint para testar autentica√ß√£o Microsoft com bypass 2MFA
 */
router.post('/test-microsoft-auth', asyncHandler(async (req, res) => {
  try {
    console.log('üîê Testando autentica√ß√£o Microsoft com bypass 2MFA...');
    
    const MicrosoftAuthService = (await import('../services/MicrosoftAuthService.js')).default;
    const microsoftAuth = new MicrosoftAuthService();
    
    // Inicializar servi√ßo
    await microsoftAuth.init();
    
    // Tentar autentica√ß√£o com credenciais configuradas
    const authResult = await microsoftAuth.authenticateSSO(
      config.auth.microsoft.email,
      config.auth.microsoft.password
    );
    
    // Obter informa√ß√µes da sess√£o
    const sessionCookies = await microsoftAuth.getSessionCookies();
    const userInfo = microsoftAuth.getUserInfo();
    
    // Fechar browser
    await microsoftAuth.close();
    
    res.json({
      status: 'success',
      message: 'Autentica√ß√£o Microsoft realizada com sucesso',
      timestamp: new Date().toISOString(),
      authentication: {
        email: config.auth.microsoft.email,
        authenticated: microsoftAuth.isUserAuthenticated(),
        bypassMFA: {
          enabled: config.auth.microsoft.bypassMFA.enabled,
          persistentCookies: config.auth.microsoft.bypassMFA.persistentCookies,
          sessionDays: config.auth.microsoft.bypassMFA.sessionDays
        }
      },
      session: {
        cookiesCount: sessionCookies.length,
        userInfo: userInfo,
        persistent: true
      },
      nextSteps: [
        'Testar acesso ao Rhevolution com SSO',
        'Verificar persist√™ncia de sess√£o',
        'Implementar fluxo completo'
      ]
    });
  } catch (error) {
    console.error('‚ùå Erro na autentica√ß√£o Microsoft:', error.message);
    res.status(500).json({
      status: 'error',
      message: 'Erro na autentica√ß√£o Microsoft',
      error: error.message,
      details: {
        bypassMFA: config.auth.microsoft.bypassMFA.enabled,
        email: config.auth.microsoft.email
      },
      timestamp: new Date().toISOString()
    });
  }
}));

/**
 * GET /api/rhevolution/auth-flow
 * Endpoint para explicar o fluxo de autentica√ß√£o em duas fases
 */
router.get('/auth-flow', asyncHandler(async (req, res) => {
  try {
    const authFlowInfo = {
      titulo: 'Fluxo de Autentica√ß√£o em Duas Fases - Rhevolution',
      descricao: 'Sistema de automa√ß√£o web que gerencia autentica√ß√£o Microsoft SSO + Rhevolution',
      
      fases: {
        fase_1: {
          nome: 'Autentica√ß√£o Microsoft (SSO)',
          descricao: 'Primeira fase - Login no Azure AD/Microsoft',
          url_destino: 'https://login.microsoftonline.com/',
          processo: [
            '1. Sistema acessa URL do Rhevolution',
            '2. Rhevolution redireciona para Microsoft SSO',
            '3. Sistema detecta p√°gina Microsoft automaticamente',
            '4. Preenche email do usu√°rio',
            '5. Clica em "Avan√ßar"',
            '6. Preenche senha do usu√°rio',
            '7. Clica em "Entrar"',
            '8. Microsoft valida credenciais',
            '9. Microsoft gera token de autentica√ß√£o'
          ],
          campos_automatizados: {
            email: 'input[name="loginfmt"], input[id="i0116"]',
            senha: 'input[name="passwd"], input[id="i0118"]',
            botao_avancar: '#idSIButton9, input[value="Next"]',
            botao_entrar: '#idSIButton9, input[value="Sign in"]'
          },
          validacao_sucesso: 'URL n√£o cont√©m mais "login.microsoftonline.com"'
        },
        
        fase_2: {
          nome: 'Acesso ao Rhevolution',
          descricao: 'Segunda fase - Redirecionamento autenticado para o sistema',
          url_destino: 'https://portalrh.globalhitss.com.br/ords/rhportal/rhlgweb.show',
          processo: [
            '1. Microsoft redireciona de volta para Rhevolution',
            '2. Rhevolution recebe token de autentica√ß√£o',
            '3. Sistema valida token automaticamente',
            '4. Usu√°rio √© logado no Rhevolution',
            '5. Sistema confirma acesso aos dados de RH',
            '6. Sess√£o ativa √© estabelecida'
          ],
          validacao_sucesso: 'URL cont√©m dom√≠nio do Rhevolution + usu√°rio logado',
          dados_disponiveis: [
            'Informa√ß√µes do colaborador',
            'Dados de folha de pagamento',
            'Hist√≥rico de ponto',
            'Benef√≠cios',
            'Relat√≥rios de RH'
          ]
        }
      },
      
      implementacao_tecnica: {
        tecnologia: 'Puppeteer (automa√ß√£o de browser)',
        deteccao_automatica: 'Sistema detecta automaticamente qual fase est√° ativa',
        tratamento_erros: 'Retry autom√°tico e logs detalhados',
        seguranca: 'Credenciais gerenciadas via Doppler (nunca expostas)',
        sessao: 'Mant√©m estado da sess√£o entre as duas fases'
      },
      
      vantagens: [
        'Automa√ß√£o completa - sem interven√ß√£o manual',
        'Suporte nativo ao SSO Microsoft corporativo',
        'Detec√ß√£o inteligente de redirecionamentos',
        'Logs detalhados para debugging',
        'Tratamento robusto de erros de rede',
        'Compat√≠vel com pol√≠ticas de seguran√ßa corporativa'
      ],
      
      casos_de_uso: [
        'Extra√ß√£o automatizada de dados de RH',
        'Sincroniza√ß√£o de informa√ß√µes de colaboradores',
        'Gera√ß√£o de relat√≥rios automatizados',
        'Integra√ß√£o com sistemas terceiros',
        'Dashboards em tempo real'
      ],
      
      status_atual: {
        fase_1_microsoft: '‚úÖ Implementada e testada',
        fase_2_rhevolution: '‚úÖ Implementada e testada',
        deteccao_automatica: '‚úÖ Funcionando',
        tratamento_erros: '‚úÖ Robusto',
        logs_debugging: '‚úÖ Detalhados'
      }
    };

    res.json({
      success: true,
      timestamp: new Date().toISOString(),
      data: authFlowInfo
    });
  } catch (error) {
    console.error('‚ùå Erro no endpoint auth-flow:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
}));

/**
 * Middleware para capturar erros espec√≠ficos do Rhevolution
 */
router.use((error, req, res, next) => {
  if (error.code === 'AUTH_FAILED') {
    return res.status(401).json({
      success: false,
      message: 'Falha na autentica√ß√£o com Rhevolution',
      code: 'AUTH_FAILED',
      suggestion: 'Verifique as credenciais no Doppler'
    });
  }
  
  if (error.name === 'TimeoutError') {
    return res.status(408).json({
      success: false,
      message: 'Timeout na opera√ß√£o com Rhevolution',
      code: 'TIMEOUT_ERROR',
      suggestion: 'Tente novamente ou verifique a conectividade'
    });
  }
  
  next(error);
});

module.exports = router;