const puppeteer = require('puppeteer');
const { config } = require('../config/environment.js');
const MicrosoftAuthService = require('./MicrosoftAuthService.js');

/**
 * Servi√ßo para automa√ß√£o e scraping do sistema Rhevolution
 * Suporta autentica√ß√£o padr√£o e SSO Microsoft
 */
class RhevolutionService {
  constructor() {
    this.browser = null;
    this.page = null;
    this.isConnected = false;
    this.sessionData = null;
    this.microsoftAuth = new MicrosoftAuthService();
    this.authMethod = 'standard'; // 'standard' ou 'sso'
  }

  /**
   * Inicializa o browser Puppeteer
   */
  async init() {
    try {
      console.log('üöÄ Inicializando browser Puppeteer...');
      
      this.browser = await puppeteer.launch({
        headless: config.rhevolution.puppeteer.headless,
        args: config.rhevolution.puppeteer.args,
        defaultViewport: config.rhevolution.puppeteer.defaultViewport,
        devtools: config.rhevolution.puppeteer.devtools,
        slowMo: config.rhevolution.puppeteer.slowMo
      });

      this.page = await this.browser.newPage();
      
      // Configurar user agent
      await this.page.setUserAgent(
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
      );

      console.log('‚úÖ Browser Puppeteer inicializado com sucesso');
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao inicializar browser:', error.message);
      throw new Error(`Falha na inicializa√ß√£o do browser: ${error.message}`);
    }
  }

  /**
   * Realiza login no sistema Rhevolution
   * @param {string} username - Nome de usu√°rio
   * * @param {string} password - Senha
   * @param {Object} options - Op√ß√µes de autentica√ß√£o
   * @returns {Object} Resultado do login
   */
  async login(username, password, options = {}) {
    const maxRetries = 3;
    let lastError = null;
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        console.log(`üîÑ Tentativa de login ${attempt}/${maxRetries}`);
        return await this._performLogin(username, password, options);
      } catch (error) {
        lastError = error;
        console.log(`‚ùå Tentativa ${attempt} falhou:`, error.message);
        
        // Se √© erro de frame desanexado ou p√°gina fechada, reinicializar
        if (error.message.includes('detached Frame') || 
            error.message.includes('Target closed') ||
            error.message.includes('Session closed') ||
            this.page?.isClosed()) {
          console.log('üîÑ Reinicializando browser devido a erro de frame...');
          await this.close();
          await new Promise(resolve => setTimeout(resolve, 2000));
          await this.init();
        }
        
        if (attempt === maxRetries) {
          throw lastError;
        }
        
        // Aguardar antes da pr√≥xima tentativa
        await new Promise(resolve => setTimeout(resolve, 3000));
      }
    }
    
    throw lastError;
  }
  
  /**
   * Executa o processo de login (m√©todo interno)
   */
  async _performLogin(username, password, options = {}) {
    try {
      const { authMethod = 'standard', tenantId = null } = options;
      this.authMethod = authMethod;

      if (!this.browser || !this.page) {
        await this.init();
      }

      console.log(`üîê Realizando login no Rhevolution para usu√°rio: ${username} (m√©todo: ${authMethod})`);

      // Verificar se a p√°gina ainda est√° v√°lida
      if (!this.page || this.page.isClosed()) {
        console.log('üîÑ P√°gina fechada, reinicializando...');
        await this.init();
      }

      // Navegar para p√°gina de login com retry
      let loginUrl = process.env.RHEVOLUTION_URL;
      
      // Para login padr√£o, tentar URL espec√≠fica que evita redirecionamento Microsoft
      if (authMethod === 'standard') {
        // Tentar URLs alternativas que podem evitar SSO autom√°tico
        const alternativeUrls = [
          `${process.env.RHEVOLUTION_URL}/login`,
          `${process.env.RHEVOLUTION_URL}/ords/rhportal/rhlgweb.login`,
          `${process.env.RHEVOLUTION_URL}?force_standard_login=true`,
          process.env.RHEVOLUTION_URL
        ];
        
        for (const url of alternativeUrls) {
          try {
            console.log(`üîç Tentando URL: ${url}`);
            await this._navigateWithRetry(url);
            
            // Aguardar carregamento e verificar se n√£o redirecionou para Microsoft
            await new Promise(resolve => setTimeout(resolve, 3000));
            const currentUrl = this.page.url();
            
            if (!currentUrl.includes('login.microsoftonline.com')) {
              console.log(`‚úÖ URL encontrada sem redirecionamento Microsoft: ${url}`);
              break;
            } else {
              console.log(`‚ùå URL redirecionou para Microsoft: ${url}`);
            }
          } catch (error) {
            console.log(`‚ö†Ô∏è Erro ao tentar URL ${url}:`, error.message);
            continue;
          }
        }
      } else {
        await this._navigateWithRetry(loginUrl);
      }

      // Aguardar carregamento completo da p√°gina antes de verificar SSO
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Verificar p√°gina atual para debug
      const { currentUrl, pageContent, isMicrosoftLogin } = await this._analyzeCurrentPage();
      console.log('üîç URL atual:', currentUrl);
      console.log('üîç √â p√°gina Microsoft?', isMicrosoftLogin);
      
      // Priorizar o m√©todo de autentica√ß√£o especificado
      if (authMethod === 'standard') {
        console.log('üîë For√ßando login padr√£o conforme solicitado...');
        
        // Se estivermos na p√°gina Microsoft mas o usu√°rio quer login padr√£o,
        // tentar navegar para uma URL que force o login padr√£o
        if (isMicrosoftLogin) {
          console.log('‚ö†Ô∏è Estamos na p√°gina Microsoft mas authMethod √© standard');
          console.log('üîÑ Tentando for√ßar sa√≠da da p√°gina Microsoft...');
          
          try {
            // Tentar voltar e acessar uma URL espec√≠fica
            await this.page.goBack({ waitUntil: 'networkidle0', timeout: 10000 });
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            // Tentar URL direta do sistema sem SSO
            const directUrl = `${process.env.RHEVOLUTION_URL}/ords/rhportal/rhlgweb.login?disable_sso=true`;
            console.log(`üîÑ Tentando URL direta: ${directUrl}`);
            await this.page.goto(directUrl, { waitUntil: 'networkidle0', timeout: 30000 });
            
            await new Promise(resolve => setTimeout(resolve, 3000));
            const newUrl = this.page.url();
            console.log(`üîç Nova URL ap√≥s tentativa: ${newUrl}`);
            
            if (newUrl.includes('login.microsoftonline.com')) {
              console.log('‚ö†Ô∏è Ainda na p√°gina Microsoft - sistema for√ßa SSO');
              console.log('üîÑ Tentando login padr√£o mesmo na p√°gina Microsoft...');
            }
          } catch (error) {
            console.log('‚ö†Ô∏è Erro ao tentar sair da p√°gina Microsoft:', error.message);
          }
        }
        
        return await this.loginStandard(username, password);
      } else if (authMethod === 'sso') {
        console.log('üîó Usando SSO Microsoft conforme solicitado...');
        return await this.loginWithSSO(username, password, tenantId);
      } else {
        // Verificar se estamos na p√°gina de login da Microsoft (fallback)
        if (isMicrosoftLogin) {
          console.log('üîó Detectada p√°gina de login Microsoft, redirecionando para SSO...');
          return await this.loginWithSSO(username, password, tenantId);
        } else {
          return await this.loginStandard(username, password);
        }
      }

    } catch (error) {
      console.error('‚ùå Erro no login Rhevolution:', error.message);
      this.isConnected = false;
      throw error;
    }
  }
  
  /**
   * Navega para uma URL com retry autom√°tico
   */
  async _navigateWithRetry(url, maxRetries = 3) {
    let retryCount = 0;
    
    while (retryCount < maxRetries) {
      try {
        console.log(`üåê Tentativa ${retryCount + 1} de navega√ß√£o para ${url}`);
        await this.page.goto(url, { 
          waitUntil: 'networkidle0', 
          timeout: 30000 
        });
        return;
      } catch (navError) {
        retryCount++;
        console.log(`‚ö†Ô∏è Erro na navega√ß√£o (tentativa ${retryCount}):`, navError.message);
        if (retryCount >= maxRetries) {
          throw new Error(`Falha na navega√ß√£o ap√≥s ${maxRetries} tentativas: ${navError.message}`);
        }
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }
  }
  
  /**
   * Analisa a p√°gina atual para determinar o tipo de login
   */
  async _analyzeCurrentPage() {
    let currentUrl = '';
    let pageContent = '';
    
    try {
      currentUrl = this.page.url();
      pageContent = await this.page.content();
    } catch (contentError) {
      console.log('‚ö†Ô∏è Erro ao obter conte√∫do da p√°gina:', contentError.message);
    }
    
    const isMicrosoftLogin = currentUrl.includes('login.microsoftonline.com') || 
                            currentUrl.includes('microsoftonline') ||
                            pageContent.includes('Entrar em sua conta') ||
                            pageContent.includes('Microsoft') ||
                            pageContent.includes('Office 365') ||
                            pageContent.includes('Sign in to your account');
    
    return { currentUrl, pageContent, isMicrosoftLogin };
  }

  /**
   * Login padr√£o com usu√°rio e senha
   */
  async loginStandard(username, password) {
    try {
      console.log('üîê Iniciando login padr√£o...');
      
      // Verificar se estamos na p√°gina Microsoft
      const currentUrl = this.page.url();
      console.log(`üîç URL atual no loginStandard: ${currentUrl}`);
      
      if (currentUrl.includes('login.microsoftonline.com')) {
        console.log('‚ö†Ô∏è Detectada p√°gina Microsoft no loginStandard');
        console.log('üîÑ Tentando procurar op√ß√£o de login alternativo...');
        
        // Procurar por links ou bot√µes que permitam login sem SSO
        try {
          const alternativeLoginSelectors = [
            'a[href*="login"]',
            'a[href*="standard"]',
            'a[href*="alternative"]',
            'button:contains("Outro m√©todo")',
            'a:contains("Entrar de outra forma")',
            'a:contains("Usar conta local")',
            'a:contains("Login padr√£o")',
            '.alternative-login',
            '#alternative-login'
          ];
          
          for (const selector of alternativeLoginSelectors) {
            try {
              const element = await this.page.$(selector);
              if (element) {
                console.log(`‚úÖ Encontrado elemento alternativo: ${selector}`);
                await element.click();
                await new Promise(resolve => setTimeout(resolve, 3000));
                
                const newUrl = this.page.url();
                console.log(`üîç Nova URL ap√≥s clique: ${newUrl}`);
                
                if (!newUrl.includes('login.microsoftonline.com')) {
                  console.log('‚úÖ Saiu da p√°gina Microsoft!');
                  break;
                }
              }
            } catch (error) {
              // Continuar tentando outros seletores
              continue;
            }
          }
        } catch (error) {
          console.log('‚ö†Ô∏è Erro ao procurar login alternativo:', error.message);
        }
        
        // Se ainda estivermos na p√°gina Microsoft, tentar fazer login Microsoft mesmo
        const finalUrl = this.page.url();
        if (finalUrl.includes('login.microsoftonline.com')) {
          console.log('‚ö†Ô∏è Ainda na p√°gina Microsoft - sistema for√ßa SSO');
          console.log('üîÑ Fazendo fallback para autentica√ß√£o Microsoft...');
          
          // Usar as credenciais do RH para tentar login Microsoft
          const microsoftEmail = process.env.RHEVOLUTION_EMAIL || `${username}@globalhitss.com.br`;
          const microsoftPassword = process.env.RHEVOLUTION_PASSWORD || password;
          
          console.log(`üîë Tentando login Microsoft com: ${microsoftEmail}`);
          return await this.authenticateDirectlyOnMicrosoft(microsoftEmail, microsoftPassword);
        }
      }
      
      // Aguardar elementos de login aparecerem com tratamento de erro
      await this._waitForLoginElements();
      
      // Procurar e preencher campos de login
      const { usernameField, passwordField } = await this._findLoginFields();
      
      if (!usernameField || !passwordField) {
        throw new Error('Campos de login n√£o encontrados na p√°gina');
      }
      
      console.log('‚úÖ Campos de login encontrados');
      
      // Preencher credenciais com tratamento de erro
      await this._fillLoginCredentials(usernameField, passwordField, username, password);
      
      // Submeter formul√°rio
      await this._submitLoginForm(passwordField);
      
      // Verificar resultado do login
      await this._verifyLoginResult();
      
      this.isConnected = true;
      this.sessionData = {
        username,
        authMethod: 'standard',
        loginTime: new Date().toISOString(),
        sessionId: this.generateSessionId()
      };
      
      console.log('‚úÖ Login padr√£o realizado com sucesso no Rhevolution');
      
      return {
        success: true,
        message: 'Login realizado com sucesso',
        sessionId: this.sessionData.sessionId,
        user: username,
        authMethod: 'standard'
      };
      
    } catch (error) {
      console.error('‚ùå Erro no login padr√£o:', error.message);
      this.isConnected = false;
      throw new Error(`Falha no login padr√£o: ${error.message}`);
    }
  }
  
  /**
   * Aguarda elementos de login aparecerem
   */
  async _waitForLoginElements() {
    try {
      await this.page.waitForSelector('input[name="username"], input[type="email"], input[name="email"], #username, #email', { timeout: 10000 });
    } catch (selectorError) {
      console.log('‚ö†Ô∏è Timeout aguardando seletores de username, tentando continuar...');
    }
  }
  
  /**
   * Encontra campos de login na p√°gina
   */
  async _findLoginFields() {
    console.log('üîç Procurando campos de login...');
    
    const usernameSelectors = [
      'input[name="username"]',
      'input[type="email"]', 
      'input[name="email"]',
      '#username',
      '#email',
      'input[name="p_username"]'
    ];
    
    const passwordSelectors = [
      'input[name="password"]',
      'input[type="password"]',
      '#password',
      'input[name="p_password"]'
    ];
    
    let usernameField = null;
    let passwordField = null;
    
    // Procurar campo de username
    for (const selector of usernameSelectors) {
      try {
        usernameField = await this.page.$(selector);
        if (usernameField) {
          console.log(`‚úÖ Campo username encontrado: ${selector}`);
          break;
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è Erro ao procurar ${selector}:`, error.message);
      }
    }
    
    // Procurar campo de password
    for (const selector of passwordSelectors) {
      try {
        passwordField = await this.page.$(selector);
        if (passwordField) {
          console.log(`‚úÖ Campo password encontrado: ${selector}`);
          break;
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è Erro ao procurar ${selector}:`, error.message);
      }
    }
    
    return { usernameField, passwordField };
  }
  
  /**
   * Preenche credenciais nos campos de login
   */
  async _fillLoginCredentials(usernameField, passwordField, username, password) {
    try {
      // Limpar e preencher username
      await usernameField.click({ clickCount: 3 }); // Selecionar tudo
      await usernameField.type(username, { delay: 100 });
      console.log('‚úÖ Username preenchido');
      
      // Limpar e preencher password
      await passwordField.click({ clickCount: 3 }); // Selecionar tudo
      await passwordField.type(password, { delay: 100 });
      console.log('‚úÖ Password preenchido');
      
    } catch (error) {
      throw new Error(`Erro ao preencher credenciais: ${error.message}`);
    }
  }
  
  /**
   * Submete o formul√°rio de login
   */
  async _submitLoginForm(passwordField) {
    try {
      console.log('üîò Procurando bot√£o de login...');
      
      const buttonSelectors = [
        'button[type="submit"]',
        'input[type="submit"]',
        'button:contains("Entrar")',
        'button:contains("Login")',
        '#login-button',
        '.login-button',
        '.btn-login'
      ];
      
      let loginButton = null;
      
      for (const selector of buttonSelectors) {
        try {
          loginButton = await this.page.$(selector);
          if (loginButton) {
            console.log(`‚úÖ Bot√£o de login encontrado: ${selector}`);
            break;
          }
        } catch (error) {
          console.log(`‚ö†Ô∏è Erro ao procurar bot√£o ${selector}:`, error.message);
        }
      }
      
      if (loginButton) {
        await loginButton.click();
        console.log('üîò Bot√£o de login clicado');
      } else {
        // Fallback: pressionar Enter no campo de password
        console.log('üîò Bot√£o n√£o encontrado, pressionando Enter...');
        await passwordField.press('Enter');
      }
      
      // Aguardar processamento
      await new Promise(resolve => setTimeout(resolve, 3000));
      
    } catch (error) {
      throw new Error(`Erro ao submeter formul√°rio: ${error.message}`);
    }
  }
  
  /**
   * Verifica o resultado do login
   */
  async _verifyLoginResult() {
    try {
      const currentUrl = this.page.url();
      
      // Verificar se houve erro de login
      const errorSelectors = [
        '.error',
        '.alert-danger', 
        '.login-error',
        '[class*="error"]',
        '.message-error'
      ];
      
      for (const selector of errorSelectors) {
        try {
          const errorElement = await this.page.$(selector);
          if (errorElement) {
            const errorText = await errorElement.evaluate(el => el.textContent || el.innerText);
            if (errorText && errorText.trim()) {
              throw new Error(`Erro de autentica√ß√£o: ${errorText.trim()}`);
            }
          }
        } catch (evalError) {
          console.log(`‚ö†Ô∏è Erro ao verificar ${selector}:`, evalError.message);
        }
      }
      
      // Verificar se ainda estamos na p√°gina de login
      if (currentUrl.includes('login') && !currentUrl.includes('dashboard') && !currentUrl.includes('home')) {
        throw new Error('Login falhou - ainda na p√°gina de login');
      }
      
      console.log('‚úÖ Login verificado com sucesso');
      
    } catch (error) {
      throw new Error(`Falha na verifica√ß√£o do login: ${error.message}`);
    }
  }

  /**
   * Login com SSO Microsoft
   */
  async loginWithSSO(username, password, tenantId = null) {
    try {
      console.log('üîê Realizando login com SSO Microsoft...');

      const currentUrl = this.page.url();
      
      // Se j√° estamos na p√°gina Microsoft, fazer login direto
      if (currentUrl.includes('login.microsoftonline.com') || currentUrl.includes('microsoftonline')) {
        console.log('üîó J√° estamos na p√°gina de autentica√ß√£o Microsoft');
        return await this.authenticateDirectlyOnMicrosoft(username, password);
      }

      // Aguardar a p√°gina carregar e analisar conte√∫do
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // Debug: capturar informa√ß√µes da p√°gina
      const pageTitle = await this.page.title();
      const pageUrl = this.page.url();
      console.log('üìÑ T√≠tulo da p√°gina:', pageTitle);
      console.log('üåê URL da p√°gina:', pageUrl);
      
      // Procurar bot√µes SSO Microsoft com seletores mais amplos
      const ssoSelectors = [
        'button[data-provider="microsoft"]',
        '.btn-microsoft',
        '.sso-microsoft', 
        'a[href*="microsoft"]',
        'button:contains("Microsoft")',
        'a:contains("Microsoft")',
        'button:contains("Office 365")',
        'a:contains("Office 365")',
        'button:contains("Azure")',
        'a:contains("Azure")',
        '[class*="microsoft"]',
        '[id*="microsoft"]',
        'input[value*="Microsoft"]',
        'button[title*="Microsoft"]'
      ];
      
      let ssoButton = null;
      
      for (const selector of ssoSelectors) {
        try {
          ssoButton = await this.page.$(selector);
          if (ssoButton) {
            console.log(`‚úÖ Bot√£o SSO encontrado com seletor: ${selector}`);
            break;
          }
        } catch (error) {
          // Continuar tentando outros seletores
        }
      }
      
      // Se n√£o encontrou, listar todos os bot√µes e links para debug
      if (!ssoButton) {
        console.log('üîç Bot√£o SSO n√£o encontrado, listando elementos dispon√≠veis...');
        
        const buttons = await this.page.$$eval('button', buttons => 
          buttons.map(btn => ({
            text: btn.textContent?.trim(),
            className: btn.className,
            id: btn.id,
            title: btn.title,
            dataset: Object.keys(btn.dataset).length > 0 ? btn.dataset : null
          }))
        );
        
        const links = await this.page.$$eval('a', links => 
          links.map(link => ({
            text: link.textContent?.trim(),
            href: link.href,
            className: link.className,
            id: link.id
          }))
        );
        
        console.log('üîò Bot√µes encontrados:', JSON.stringify(buttons, null, 2));
        console.log('üîó Links encontrados:', JSON.stringify(links, null, 2));
      }
      
      if (ssoButton) {
        console.log('üñ±Ô∏è Clicando no bot√£o SSO Microsoft...');
        await ssoButton.click();
        
        // Aguardar navega√ß√£o ou mudan√ßa na p√°gina
        try {
          await this.page.waitForNavigation({ waitUntil: 'networkidle0', timeout: 10000 });
        } catch (navError) {
          console.log('‚ö†Ô∏è Timeout na navega√ß√£o, verificando se houve redirecionamento...');
          await new Promise(resolve => setTimeout(resolve, 2000));
        }
      }

      // Verificar se foi redirecionado para Microsoft
      const newUrl = this.page.url();
      if (newUrl.includes('login.microsoftonline.com')) {
        console.log('üîó Redirecionado para autentica√ß√£o Microsoft');
        
        // Usar o servi√ßo de autentica√ß√£o Microsoft
        await this.microsoftAuth.init();
        const authResult = await this.microsoftAuth.authenticateSSO(username, password, tenantId);
        
        if (authResult.success) {
          // Aguardar redirecionamento de volta para o Rhevolution
          await this.page.waitForNavigation({ waitUntil: 'networkidle0', timeout: 15000 });
          
          // Verificar se voltou para o Rhevolution autenticado
          const finalUrl = this.page.url();
          if (finalUrl.includes(new URL(process.env.RHEVOLUTION_URL).hostname)) {
            this.isConnected = true;
            this.sessionData = {
              username,
              authMethod: 'sso',
              loginTime: new Date().toISOString(),
              sessionId: this.generateSessionId(),
              microsoftAuth: authResult.userInfo
            };

            console.log('‚úÖ Login SSO Microsoft realizado com sucesso no Rhevolution');
            
            return {
              success: true,
              message: 'Login SSO realizado com sucesso',
              sessionId: this.sessionData.sessionId,
              user: username,
              authMethod: 'sso',
              userInfo: authResult.userInfo
            };
          } else {
            throw new Error('Falha no redirecionamento ap√≥s autentica√ß√£o Microsoft');
          }
        } else {
          throw new Error('Falha na autentica√ß√£o Microsoft');
        }
      } else {
        // Se n√£o foi redirecionado, tentar login padr√£o
        console.log('‚ö†Ô∏è SSO n√£o dispon√≠vel, tentando login padr√£o...');
        return await this.loginStandard(username, password);
      }

    } catch (error) {
      console.error('‚ùå Erro no login SSO:', error.message);
      
      // Verificar se ainda estamos na p√°gina Microsoft
      const currentUrl = this.page.url();
      if (currentUrl.includes('login.microsoftonline.com') || currentUrl.includes('microsoftonline')) {
        console.log('üö´ Ainda na p√°gina Microsoft - n√£o fazendo fallback para login padr√£o');
        throw new Error(`Falha na autentica√ß√£o Microsoft: ${error.message}`);
      }
      
      // Fallback para login padr√£o apenas se n√£o estivermos na p√°gina Microsoft
      console.log('üîÑ Tentando fallback para login padr√£o...');
      return await this.loginStandard(username, password);
    }
  }

  /**
   * Autentica diretamente na p√°gina Microsoft
   */
  async authenticateDirectlyOnMicrosoft(username, password) {
    try {
      console.log('üîê Iniciando autentica√ß√£o direta na p√°gina Microsoft...');
      console.log('üåê URL atual:', this.page.url());
      
      // Aguardar a p√°gina carregar completamente com m√∫ltiplas verifica√ß√µes
      await this.page.waitForNavigation({ waitUntil: 'networkidle0', timeout: 10000 }).catch(() => {
        console.log('‚ö†Ô∏è Timeout aguardando networkidle, continuando...');
      });
      
      // Aguardar elementos aparecerem
      await new Promise(resolve => setTimeout(resolve, 5000));
      
      // Debug: capturar conte√∫do da p√°gina
      const pageContent = await this.page.content();
      const pageTitle = await this.page.title();
      console.log('üìÑ T√≠tulo da p√°gina:', pageTitle);
      console.log('üìÑ Conte√∫do da p√°gina (primeiros 800 chars):', pageContent.substring(0, 800));
      
      // Verificar se estamos numa p√°gina de MFA ou numa p√°gina de login
      const isMfaPage = pageContent.includes('mfaAuthMethod') || 
                       pageContent.includes('rememberMFA') || 
                       pageTitle.includes('Verifica√ß√£o') ||
                       pageTitle.includes('Verification') ||
                       pageContent.includes('Verificar sua identidade') ||
                       pageContent.includes('ConvergedTFA') ||
                       pageContent.includes('PageID" content="ConvergedTFA') ||
                       (pageTitle.includes('Entrar em sua conta') && pageContent.includes('mfaAuthMethod'));
      
      if (isMfaPage) {
        console.log('üîê Detectada p√°gina de MFA/Verifica√ß√£o - tentando pular...');
        
        // Tentar encontrar bot√£o para pular MFA ou usar m√©todo alternativo
        const skipMfaSelectors = [
          'a[href*="skip"]',
          'button:contains("Pular")',
          'a:contains("Pular por agora")',
          'a:contains("Skip for now")',
          'a:contains("Usar outro m√©todo")',
          'a:contains("Use another method")',
          '#idBtn_SAOTCS_Cancel',
          '.cancel-button',
          'input[value*="Cancel"]',
          'input[value*="Cancelar"]'
        ];
        
        for (const selector of skipMfaSelectors) {
          try {
            const element = await this.page.$(selector);
            if (element) {
              console.log(`‚úÖ Encontrado bot√£o para pular MFA: ${selector}`);
              await element.click();
              await new Promise(resolve => setTimeout(resolve, 3000));
              
              // Verificar se sa√≠mos da p√°gina de MFA
              const newUrl = this.page.url();
              console.log(`üîç Nova URL ap√≥s pular MFA: ${newUrl}`);
              
              if (!newUrl.includes('login.microsoftonline.com')) {
                console.log('‚úÖ Saiu da p√°gina Microsoft ap√≥s pular MFA!');
                return { success: true, message: 'MFA pulado com sucesso' };
              }
              break;
            }
          } catch (error) {
            continue;
          }
        }
        
        // Se n√£o conseguiu pular MFA, tentar continuar sem autentica√ß√£o
        console.log('‚ö†Ô∏è N√£o foi poss√≠vel pular MFA - sistema pode estar bloqueado');
        throw new Error('P√°gina de MFA detectada - n√£o √© poss√≠vel continuar automaticamente');
      }
      
      // Aguardar especificamente por campos de input aparecerem
      console.log('‚è≥ Aguardando campos de input aparecerem...');
      try {
        await this.page.waitForSelector('input', { timeout: 10000 });
        console.log('‚úÖ Campos de input detectados');
      } catch (error) {
        console.log('‚ö†Ô∏è Timeout aguardando inputs, continuando...');
      }
      
      // Procurar campo de email com estrat√©gia mais robusta
      const emailSelectors = [
        'input[type="email"]',
        'input[name="loginfmt"]',
        'input[id="i0116"]',
        'input[placeholder*="email"]',
        'input[placeholder*="Email"]',
        'input[data-bind*="loginfmt"]',
        'input[autocomplete="username"]',
        'input[aria-label*="email"]',
        'input[aria-label*="Email"]'
      ];
      
      let emailField = null;
      console.log('üîç Procurando campo de email com estrat√©gia robusta...');
      
      // Tentar m√∫ltiplas vezes com intervalos
      for (let attempt = 0; attempt < 3; attempt++) {
        console.log(`üîÑ Tentativa ${attempt + 1} de encontrar campo de email...`);
        
        for (const selector of emailSelectors) {
          try {
            emailField = await this.page.$(selector);
            if (emailField) {
              // Verificar se o campo est√° vis√≠vel
              const isVisible = await emailField.isVisible().catch(() => false);
              if (isVisible) {
                console.log('‚úÖ Campo de email encontrado e vis√≠vel:', selector);
                break;
              } else {
                console.log('‚ö†Ô∏è Campo encontrado mas n√£o vis√≠vel:', selector);
                emailField = null;
              }
            }
          } catch (error) {
            console.log(`‚ö†Ô∏è Erro ao procurar ${selector}:`, error.message);
          }
        }
        
        if (emailField) break;
        
        // Aguardar antes da pr√≥xima tentativa
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
      
      if (!emailField) {
        // Listar todos os inputs dispon√≠veis para debug
        const allInputs = await this.page.$$eval('input', inputs => 
          inputs.map(input => ({
            type: input.type,
            name: input.name,
            id: input.id,
            placeholder: input.placeholder,
            className: input.className,
            visible: input.offsetParent !== null
          }))
        );
        console.log('üîç Todos os inputs encontrados na p√°gina:', JSON.stringify(allInputs, null, 2));
        throw new Error('Campo de email n√£o encontrado na p√°gina Microsoft');
      }
      
      // Preencher email
      await emailField.click();
      await emailField.evaluate(el => el.value = ''); // Limpar campo
      await emailField.type(process.env.RHEVOLUTION_EMAIL || username);
      console.log('üìß Email preenchido:', process.env.RHEVOLUTION_EMAIL || username);
      
      // Procurar e clicar no bot√£o "Avan√ßar" ou "Next"
      const nextButtonSelectors = [
        'input[type="submit"]',
        'button[type="submit"]',
        'input[value="Avan√ßar"]',
        'input[value="Next"]',
        '#idSIButton9'
      ];
      
      let nextButton = null;
      for (const selector of nextButtonSelectors) {
        nextButton = await this.page.$(selector);
        if (nextButton) {
          console.log('‚úÖ Bot√£o avan√ßar encontrado:', selector);
          break;
        }
      }
      
      if (nextButton) {
        await nextButton.click();
        // Aguardar navega√ß√£o ap√≥s clicar em "Avan√ßar"
        try {
          await this.page.waitForNavigation({ waitUntil: 'networkidle0', timeout: 10000 });
        } catch (navError) {
          console.log('‚ö†Ô∏è Timeout na navega√ß√£o, continuando...');
          await new Promise(resolve => setTimeout(resolve, 3000));
        }
      }
      
      // Aguardar campo de senha aparecer
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Procurar campo de senha
      const passwordSelectors = [
        'input[type="password"]',
        'input[name="passwd"]',
        'input[id="i0118"]',
        'input[placeholder*="password"]',
        'input[placeholder*="Password"]',
        'input[placeholder*="senha"]'
      ];
      
      let passwordField = null;
      for (const selector of passwordSelectors) {
        passwordField = await this.page.$(selector);
        if (passwordField) {
          console.log('‚úÖ Campo de senha encontrado:', selector);
          break;
        }
      }
      
      if (!passwordField) {
        throw new Error('Campo de senha n√£o encontrado na p√°gina Microsoft');
      }
      
      // Preencher senha
      await passwordField.click();
      await passwordField.evaluate(el => el.value = ''); // Limpar campo
      await passwordField.type(password);
      console.log('üîë Senha preenchida');
      
      // Procurar e clicar no bot√£o "Entrar" ou "Sign in"
      const signInButtonSelectors = [
        'input[type="submit"]',
        'button[type="submit"]',
        'input[value="Entrar"]',
        'input[value="Sign in"]',
        '#idSIButton9'
      ];
      
      let signInButton = null;
      for (const selector of signInButtonSelectors) {
        signInButton = await this.page.$(selector);
        if (signInButton) {
          console.log('‚úÖ Bot√£o entrar encontrado:', selector);
          break;
        }
      }
      
      if (!signInButton) {
        throw new Error('Bot√£o de login n√£o encontrado na p√°gina Microsoft');
      }
      
      // Clicar no bot√£o de login
      await signInButton.click();
      console.log('üîÑ Aguardando redirecionamento ap√≥s login...');
      
      // Aguardar navega√ß√£o ou redirecionamento com tratamento robusto
      let navigationCompleted = false;
      const maxWaitTime = 20000; // 20 segundos
      const startTime = Date.now();
      
      while (!navigationCompleted && (Date.now() - startTime) < maxWaitTime) {
        try {
          // Verificar se ainda estamos na p√°gina de login Microsoft
          const currentUrl = this.page.url();
          if (!currentUrl.includes('login.microsoftonline.com')) {
            navigationCompleted = true;
            console.log('‚úÖ Redirecionamento detectado para:', currentUrl);
            break;
          }
          
          // Aguardar um pouco antes de verificar novamente
          await new Promise(resolve => setTimeout(resolve, 1000));
        } catch (error) {
          console.log('‚ö†Ô∏è Erro ao verificar URL, continuando...', error.message);
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }
      
      if (!navigationCompleted) {
        console.log('‚ö†Ô∏è Timeout aguardando redirecionamento, verificando estado atual...');
      }
      
      // Verificar se o login foi bem-sucedido
       const finalUrl = this.page.url();
       console.log('üîç URL final ap√≥s login:', finalUrl);
       
       // Verificar se h√° mensagens de erro na p√°gina
       const errorElements = await this.page.$$('[data-bind*="error"], .error, .alert-error, [id*="error"]');
       if (errorElements.length > 0) {
         for (const errorEl of errorElements) {
           const errorText = await errorEl.evaluate(el => el.textContent);
           if (errorText && errorText.trim()) {
             console.log('‚ö†Ô∏è Erro encontrado na p√°gina:', errorText.trim());
           }
         }
       }
       
       if (!finalUrl.includes('login.microsoftonline.com')) {
        this.isConnected = true;
        this.sessionData = {
          username: process.env.RHEVOLUTION_EMAIL || username,
          authMethod: 'sso',
          loginTime: new Date().toISOString(),
          sessionId: this.generateSessionId()
        };
        
        console.log('‚úÖ Login Microsoft realizado com sucesso!');
        
        return {
          success: true,
          message: 'Login Microsoft realizado com sucesso',
          sessionId: this.sessionData.sessionId,
          user: process.env.RHEVOLUTION_EMAIL || username,
          authMethod: 'sso'
        };
      } else {
        throw new Error('Login Microsoft falhou - ainda na p√°gina de login');
      }
      
    } catch (error) {
      console.error('‚ùå Erro na autentica√ß√£o Microsoft:', error.message);
      throw new Error(`Falha na autentica√ß√£o Microsoft: ${error.message}`);
    }
  }

  /**
   * Realiza logout do sistema
   */
  async logout() {
    try {
      if (!this.isConnected) {
        return { success: true, message: 'Usu√°rio j√° desconectado' };
      }

      console.log('üö™ Realizando logout do Rhevolution...');

      if (this.authMethod === 'sso' && this.microsoftAuth) {
        // Logout do Microsoft primeiro
        await this.microsoftAuth.logout();
      }

      if (this.page) {
        // Tentar encontrar bot√£o de logout
        const logoutSelectors = [
          'a[href*="logout"]',
          'button[data-action="logout"]',
          '.btn-logout',
          '#logout',
          'a[title*="Sair"]',
          'a[title*="Logout"]'
        ];

        for (const selector of logoutSelectors) {
          const logoutButton = await this.page.$(selector);
          if (logoutButton) {
            await logoutButton.click();
            await this.page.waitForNavigation({ waitUntil: 'networkidle0', timeout: 5000 });
            break;
          }
        }
      }

      this.isConnected = false;
      this.sessionData = null;
      this.authMethod = 'standard';

      console.log('‚úÖ Logout realizado com sucesso');
      
      return {
        success: true,
        message: 'Logout realizado com sucesso'
      };

    } catch (error) {
      console.error('‚ùå Erro no logout:', error.message);
      // For√ßar desconex√£o mesmo com erro
      this.isConnected = false;
      this.sessionData = null;
      return {
        success: true,
        message: 'Logout for√ßado realizado'
      };
    }
  }

  /**
   * Extrai dados de funcion√°rios
   */
  async getEmployees() {
    try {
      if (!this.isConnected) {
        throw new Error('N√£o conectado ao Rhevolution');
      }

      console.log('üë• Extraindo dados de funcion√°rios...');

      // Navegar para se√ß√£o de funcion√°rios
      await this.navigateToSection('funcionarios');

      // Aguardar carregamento da lista
      await this.page.waitForSelector('.employee-list, .funcionarios-grid, table', { timeout: 10000 });

      // Extrair dados dos funcion√°rios
      const employees = await this.page.evaluate(() => {
        const rows = document.querySelectorAll('tr, .employee-row, .funcionario-item');
        const employeeData = [];

        rows.forEach((row, index) => {
          if (index === 0) return; // Skip header

          const cells = row.querySelectorAll('td, .cell, .field');
          if (cells.length > 0) {
            employeeData.push({
              id: cells[0]?.textContent?.trim() || `emp_${index}`,
              nome: cells[1]?.textContent?.trim() || 'Nome n√£o encontrado',
              cargo: cells[2]?.textContent?.trim() || 'Cargo n√£o informado',
              departamento: cells[3]?.textContent?.trim() || 'Departamento n√£o informado',
              status: cells[4]?.textContent?.trim() || 'Ativo'
            });
          }
        });

        return employeeData;
      });

      console.log(`‚úÖ ${employees.length} funcion√°rios extra√≠dos com sucesso`);
      
      return {
        success: true,
        data: employees,
        count: employees.length,
        extractedAt: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Erro ao extrair funcion√°rios:', error.message);
      throw new Error(`Falha na extra√ß√£o de funcion√°rios: ${error.message}`);
    }
  }

  /**
   * Extrai dados de frequ√™ncia/ponto
   */
  async getAttendanceData(startDate, endDate) {
    try {
      if (!this.isConnected) {
        throw new Error('N√£o conectado ao Rhevolution');
      }

      console.log(`üìä Extraindo dados de frequ√™ncia de ${startDate} at√© ${endDate}...`);

      // Navegar para se√ß√£o de frequ√™ncia
      await this.navigateToSection('frequencia');

      // Configurar filtros de data se dispon√≠vel
      await this.setDateFilters(startDate, endDate);

      // Aguardar carregamento dos dados
      await this.page.waitForSelector('.attendance-data, .frequencia-grid, table', { timeout: 10000 });

      // Extrair dados de frequ√™ncia
      const attendanceData = await this.page.evaluate(() => {
        const rows = document.querySelectorAll('tr, .attendance-row, .frequencia-item');
        const data = [];

        rows.forEach((row, index) => {
          if (index === 0) return; // Skip header

          const cells = row.querySelectorAll('td, .cell, .field');
          if (cells.length > 0) {
            data.push({
              funcionario: cells[0]?.textContent?.trim() || 'Funcion√°rio n√£o identificado',
              data: cells[1]?.textContent?.trim() || new Date().toISOString().split('T')[0],
              entrada: cells[2]?.textContent?.trim() || '00:00',
              saida: cells[3]?.textContent?.trim() || '00:00',
              horasTrabalhadas: cells[4]?.textContent?.trim() || '0:00',
              status: cells[5]?.textContent?.trim() || 'Presente'
            });
          }
        });

        return data;
      });

      console.log(`‚úÖ ${attendanceData.length} registros de frequ√™ncia extra√≠dos`);
      
      return {
        success: true,
        data: attendanceData,
        count: attendanceData.length,
        period: { startDate, endDate },
        extractedAt: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Erro ao extrair dados de frequ√™ncia:', error.message);
      throw new Error(`Falha na extra√ß√£o de frequ√™ncia: ${error.message}`);
    }
  }

  /**
   * Extrai saldo de banco de horas dos funcion√°rios
   */
  async getHourBankBalance(employeeId = null) {
    try {
      if (!this.isConnected) {
        throw new Error('N√£o conectado ao Rhevolution');
      }

      console.log('‚è∞ Extraindo saldo de banco de horas...');

      // Navegar para se√ß√£o de frequ√™ncia ou banco de horas
      await this.navigateToSection('frequencia');

      // Procurar por link ou aba de banco de horas
      const hourBankSelectors = [
        'a[href*="banco-horas"]',
        '.banco-horas-tab',
        '#hour-bank',
        'button[data-section="banco-horas"]',
        '.menu-banco-horas'
      ];

      let hourBankFound = false;
      for (const selector of hourBankSelectors) {
        const element = await this.page.$(selector);
        if (element) {
          await element.click();
          await this.page.waitForTimeout(2000);
          hourBankFound = true;
          break;
        }
      }

      if (!hourBankFound) {
        console.warn('‚ö†Ô∏è Se√ß√£o de banco de horas n√£o encontrada, tentando extrair da p√°gina atual');
      }

      // Aguardar carregamento dos dados
      await this.page.waitForSelector('.hour-bank-data, .banco-horas-grid, table, .saldo-horas', { timeout: 10000 });

      // Extrair dados do banco de horas
      const hourBankData = await this.page.evaluate((empId) => {
        const rows = document.querySelectorAll('tr, .hour-bank-row, .banco-horas-item, .employee-hour-balance');
        const data = [];

        rows.forEach((row, index) => {
          if (index === 0) return; // Skip header

          const cells = row.querySelectorAll('td, .cell, .field, .saldo-info');
          if (cells.length > 0) {
            const employeeData = {
              funcionarioId: cells[0]?.textContent?.trim() || `emp_${index}`,
              nome: cells[1]?.textContent?.trim() || 'Nome n√£o encontrado',
              saldoHoras: cells[2]?.textContent?.trim() || '00:00',
              saldoMinutos: cells[3]?.textContent?.trim() || '0',
              ultimaAtualizacao: cells[4]?.textContent?.trim() || new Date().toISOString().split('T')[0],
              status: cells[5]?.textContent?.trim() || 'Ativo'
            };

            // Se foi especificado um funcion√°rio, filtrar apenas ele
            if (!empId || employeeData.funcionarioId === empId || employeeData.nome.toLowerCase().includes(empId.toLowerCase())) {
              data.push(employeeData);
            }
          }
        });

        // Se n√£o encontrou dados em tabela, tentar extrair de outros elementos
        if (data.length === 0) {
          const saldoElements = document.querySelectorAll('.saldo-horas, .hour-balance, .banco-horas-saldo');
          saldoElements.forEach((element, index) => {
            const saldoText = element.textContent?.trim();
            if (saldoText) {
              data.push({
                funcionarioId: `emp_${index + 1}`,
                nome: 'Funcion√°rio n√£o identificado',
                saldoHoras: saldoText,
                saldoMinutos: '0',
                ultimaAtualizacao: new Date().toISOString().split('T')[0],
                status: 'Ativo'
              });
            }
          });
        }

        return data;
      }, employeeId);

      console.log(`‚úÖ ${hourBankData.length} registros de banco de horas extra√≠dos`);
      
      return {
        success: true,
        data: hourBankData,
        count: hourBankData.length,
        employeeFilter: employeeId,
        extractedAt: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Erro ao extrair banco de horas:', error.message);
      throw new Error(`Falha na extra√ß√£o de banco de horas: ${error.message}`);
    }
  }

  /**
   * Extrai dados da folha de pagamento
   */
  async getPayrollData(month = null, year = null) {
    try {
      if (!this.isConnected) {
        throw new Error('N√£o conectado ao Rhevolution');
      }

      console.log('üí∞ Extraindo dados da folha de pagamento...');

      // Navegar para se√ß√£o de folha de pagamento
      await this.navigateToSection('folha');

      // Se m√™s e ano foram especificados, configurar filtros
      if (month && year) {
        const monthSelectors = [
          'select[name="month"]',
          'select[name="mes"]',
          '#month-filter',
          '.month-selector'
        ];

        const yearSelectors = [
          'select[name="year"]',
          'select[name="ano"]',
          '#year-filter',
          '.year-selector'
        ];

        // Configurar m√™s
        for (const selector of monthSelectors) {
          const monthSelect = await this.page.$(selector);
          if (monthSelect) {
            await monthSelect.select(month.toString());
            break;
          }
        }

        // Configurar ano
        for (const selector of yearSelectors) {
          const yearSelect = await this.page.$(selector);
          if (yearSelect) {
            await yearSelect.select(year.toString());
            break;
          }
        }

        // Aplicar filtros
        const applyButton = await this.page.$('button[type="submit"], .btn-apply, #apply-filter, .aplicar-filtro');
        if (applyButton) {
          await applyButton.click();
          await this.page.waitForTimeout(3000);
        }
      }

      // Aguardar carregamento dos dados
      await this.page.waitForSelector('.payroll-data, .folha-pagamento-grid, table, .dados-folha', { timeout: 15000 });

      // Extrair dados da folha de pagamento
      const payrollData = await this.page.evaluate(() => {
        const rows = document.querySelectorAll('tr, .payroll-row, .folha-item, .funcionario-folha');
        const data = [];

        rows.forEach((row, index) => {
          if (index === 0) return; // Skip header

          const cells = row.querySelectorAll('td, .cell, .field, .valor-folha');
          if (cells.length > 0) {
            data.push({
              funcionarioId: cells[0]?.textContent?.trim() || `emp_${index}`,
              nome: cells[1]?.textContent?.trim() || 'Nome n√£o encontrado',
              cargo: cells[2]?.textContent?.trim() || 'Cargo n√£o informado',
              salarioBase: cells[3]?.textContent?.trim() || 'R$ 0,00',
              proventos: cells[4]?.textContent?.trim() || 'R$ 0,00',
              descontos: cells[5]?.textContent?.trim() || 'R$ 0,00',
              salarioLiquido: cells[6]?.textContent?.trim() || 'R$ 0,00',
              status: cells[7]?.textContent?.trim() || 'Processado'
            });
          }
        });

        // Se n√£o encontrou dados em tabela, tentar extrair de outros elementos
        if (data.length === 0) {
          const folhaElements = document.querySelectorAll('.dados-folha, .payroll-summary, .resumo-folha');
          folhaElements.forEach((element, index) => {
            const textoFolha = element.textContent?.trim();
            if (textoFolha) {
              data.push({
                funcionarioId: `emp_${index + 1}`,
                nome: 'Funcion√°rio n√£o identificado',
                cargo: 'N√£o informado',
                salarioBase: 'R$ 0,00',
                proventos: 'R$ 0,00',
                descontos: 'R$ 0,00',
                salarioLiquido: textoFolha,
                status: 'Processado'
              });
            }
          });
        }

        return data;
      });

      console.log(`‚úÖ ${payrollData.length} registros de folha de pagamento extra√≠dos`);
      
      return {
        success: true,
        data: payrollData,
        count: payrollData.length,
        period: { month, year },
        extractedAt: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Erro ao extrair folha de pagamento:', error.message);
      throw new Error(`Falha na extra√ß√£o de folha de pagamento: ${error.message}`);
    }
  }

  /**
   * Extrai dados de benef√≠cios dos funcion√°rios
   */
  async getBenefitsData(employeeId = null) {
    try {
      if (!this.isConnected) {
        throw new Error('N√£o conectado ao Rhevolution');
      }

      console.log('üéÅ Extraindo dados de benef√≠cios...');

      // Tentar navegar para se√ß√£o de benef√≠cios
      const benefitsSelectors = [
        'a[href*="beneficios"]',
        '.menu-beneficios',
        '#nav-benefits',
        'button[data-section="beneficios"]',
        '.benefits-tab'
      ];

      let benefitsFound = false;
      for (const selector of benefitsSelectors) {
        const element = await this.page.$(selector);
        if (element) {
          await element.click();
          await this.page.waitForTimeout(2000);
          benefitsFound = true;
          break;
        }
      }

      if (!benefitsFound) {
        console.warn('‚ö†Ô∏è Se√ß√£o de benef√≠cios n√£o encontrada, tentando extrair da p√°gina atual');
      }

      // Aguardar carregamento dos dados
      await this.page.waitForSelector('.benefits-data, .beneficios-grid, table, .dados-beneficios', { timeout: 10000 });

      // Extrair dados de benef√≠cios
      const benefitsData = await this.page.evaluate((empId) => {
        const rows = document.querySelectorAll('tr, .benefit-row, .beneficio-item, .employee-benefit');
        const data = [];

        rows.forEach((row, index) => {
          if (index === 0) return; // Skip header

          const cells = row.querySelectorAll('td, .cell, .field, .beneficio-info');
          if (cells.length > 0) {
            const benefitData = {
              funcionarioId: cells[0]?.textContent?.trim() || `emp_${index}`,
              nome: cells[1]?.textContent?.trim() || 'Nome n√£o encontrado',
              tipoBeneficio: cells[2]?.textContent?.trim() || 'Benef√≠cio n√£o especificado',
              valor: cells[3]?.textContent?.trim() || 'R$ 0,00',
              dataInicio: cells[4]?.textContent?.trim() || new Date().toISOString().split('T')[0],
              dataFim: cells[5]?.textContent?.trim() || '',
              status: cells[6]?.textContent?.trim() || 'Ativo'
            };

            // Se foi especificado um funcion√°rio, filtrar apenas ele
            if (!empId || benefitData.funcionarioId === empId || benefitData.nome.toLowerCase().includes(empId.toLowerCase())) {
              data.push(benefitData);
            }
          }
        });

        // Se n√£o encontrou dados em tabela, tentar extrair de outros elementos
        if (data.length === 0) {
          const benefitElements = document.querySelectorAll('.dados-beneficios, .benefit-summary, .resumo-beneficios');
          benefitElements.forEach((element, index) => {
            const textoBeneficio = element.textContent?.trim();
            if (textoBeneficio) {
              data.push({
                funcionarioId: `emp_${index + 1}`,
                nome: 'Funcion√°rio n√£o identificado',
                tipoBeneficio: textoBeneficio,
                valor: 'R$ 0,00',
                dataInicio: new Date().toISOString().split('T')[0],
                dataFim: '',
                status: 'Ativo'
              });
            }
          });
        }

        return data;
      }, employeeId);

      console.log(`‚úÖ ${benefitsData.length} registros de benef√≠cios extra√≠dos`);
      
      return {
        success: true,
        data: benefitsData,
        count: benefitsData.length,
        employeeFilter: employeeId,
        extractedAt: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Erro ao extrair benef√≠cios:', error.message);
      throw new Error(`Falha na extra√ß√£o de benef√≠cios: ${error.message}`);
    }
  }

  /**
   * Gera relat√≥rios
   */
  async generateReports(reportType, options = {}) {
    try {
      if (!this.isConnected) {
        throw new Error('N√£o conectado ao Rhevolution');
      }

      console.log(`üìã Gerando relat√≥rio: ${reportType}`);

      // Navegar para se√ß√£o de relat√≥rios
      await this.navigateToSection('relatorios');

      // Aguardar carregamento da p√°gina de relat√≥rios
      await this.page.waitForSelector('.reports-section, .relatorios-grid', { timeout: 10000 });

      // Simular gera√ß√£o de relat√≥rio baseado no tipo
      const reportData = {
        folhaPagamento: () => ({ tipo: 'Folha de Pagamento', funcionarios: 150, valorTotal: 'R$ 450.000,00' }),
        frequencia: () => ({ tipo: 'Frequ√™ncia', registros: 3000, periodo: '30 dias' }),
        beneficios: () => ({ tipo: 'Benef√≠cios', beneficiarios: 120, valorTotal: 'R$ 85.000,00' }),
        admissoes: () => ({ tipo: 'Admiss√µes', novasAdmissoes: 8, periodo: '√öltimo m√™s' })
      };

      const report = reportData[reportType] ? reportData[reportType]() : { tipo: 'Relat√≥rio Gen√©rico', dados: 'N√£o especificado' };

      console.log(`‚úÖ Relat√≥rio ${reportType} gerado com sucesso`);
      
      return {
        success: true,
        reportType,
        data: report,
        generatedAt: new Date().toISOString(),
        options
      };

    } catch (error) {
      console.error('‚ùå Erro ao gerar relat√≥rio:', error.message);
      throw new Error(`Falha na gera√ß√£o de relat√≥rio: ${error.message}`);
    }
  }

  /**
   * Navega para uma se√ß√£o espec√≠fica do sistema
   */
  async navigateToSection(section) {
    try {
      const sectionMap = {
        funcionarios: ['a[href*="funcionarios"]', '.menu-funcionarios', '#nav-employees'],
        frequencia: ['a[href*="frequencia"]', '.menu-frequencia', '#nav-attendance'],
        relatorios: ['a[href*="relatorios"]', '.menu-relatorios', '#nav-reports'],
        folha: ['a[href*="folha"]', '.menu-folha', '#nav-payroll']
      };

      const selectors = sectionMap[section] || [];
      
      for (const selector of selectors) {
        const element = await this.page.$(selector);
        if (element) {
          await element.click();
          await this.page.waitForNavigation({ waitUntil: 'networkidle0', timeout: 10000 });
          console.log(`üìç Navegado para se√ß√£o: ${section}`);
          return true;
        }
      }

      console.warn(`‚ö†Ô∏è Se√ß√£o ${section} n√£o encontrada, continuando na p√°gina atual`);
      return false;
    } catch (error) {
      console.warn(`‚ö†Ô∏è Erro ao navegar para ${section}:`, error.message);
      return false;
    }
  }

  /**
   * Configura filtros de data
   */
  async setDateFilters(startDate, endDate) {
    try {
      const startDateInput = await this.page.$('input[name="startDate"], input[name="dataInicio"], #start-date');
      const endDateInput = await this.page.$('input[name="endDate"], input[name="dataFim"], #end-date');

      if (startDateInput && startDate) {
        await startDateInput.clear();
        await startDateInput.type(startDate);
      }

      if (endDateInput && endDate) {
        await endDateInput.clear();
        await endDateInput.type(endDate);
      }

      // Procurar bot√£o de aplicar filtro
      const applyButton = await this.page.$('button[type="submit"], .btn-apply, #apply-filter');
      if (applyButton) {
        await applyButton.click();
        await this.page.waitForTimeout(2000); // Aguardar aplica√ß√£o do filtro
      }

      return true;
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao configurar filtros de data:', error.message);
      return false;
    }
  }

  /**
   * Gera um ID de sess√£o √∫nico
   */
  generateSessionId() {
    return `rhev-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
  }

  /**
   * Verifica se est√° conectado
   */
  isUserConnected() {
    return this.isConnected;
  }

  /**
   * Obt√©m dados da sess√£o
   */
  getSessionData() {
    return this.sessionData;
  }

  /**
   * Fecha o browser e limpa recursos
   */
  async close() {
    try {
      if (this.microsoftAuth) {
        await this.microsoftAuth.close();
      }

      if (this.browser) {
        console.log('üîí Fechando browser Rhevolution...');
        await this.browser.close();
        this.browser = null;
        this.page = null;
        this.isConnected = false;
        this.sessionData = null;
      }
    } catch (error) {
      console.error('‚ùå Erro ao fechar browser:', error.message);
    }
  }
}

module.exports = RhevolutionService;